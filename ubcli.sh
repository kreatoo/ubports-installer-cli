#!/bin/bash
export DEVICE=$1
export TOPDIR=$(pwd)
########################################################
# Colors
reset_color() {
        printf '\033[37m'
}
RED="$(printf '\033[31m')"  GREEN="$(printf '\033[32m')"  ORANGE="$(printf '\033[33m')"  BLUE="$(printf '\033[34m')" ENDCOLOR="\e[0m" ENDBOLDCOLOR="$(printf '\033[1m')"
MAGENTA="$(printf '\033[35m')"  CYAN="$(printf '\033[36m')"  WHITE="$(printf '\033[37m')" BLACK="$(printf '\033[30m')" NC='\033[0m' # No Color
########################################################
# . configs/"$DEVICE".conf

if [ -z $DEVICE ]; then
    DEVICE=$(adb shell getprop ro.product.vendor.name | tr -d '\r')
fi

if [ "$DEVICE" == "" ]; then
echo "ERROR: No device defined!"
exit 1
fi

setup_dependency() {
sudo apt install yq
sudo apt install jq
sudo apt install fastboot
}

CONFIG="$(pwd)/installer-configs/v2/devices/${DEVICE}.yml"
CFG=$(yq eval -o json $CONFIG 2>/dev/null)
if [ $? -ne 0 ]; then
    CFG=$(yq . $CONFIG 2>/dev/null)
fi
DEVICEINFO=$(echo $CFG | jq -r .name)

echo Installing on $DEVICEINFO

for name in $(echo $CFG | jq .unlock[]); do
    ACTION=$(echo $CFG | jq -r .user_actions[$name])
    DESCRIPTION=$(echo $ACTION | jq -r .description)
    LINK=$(echo $ACTION | jq -r '.link // ""')
    echo ${BLUE}***********************************************
    echo ${RED}${ENDBOLDCOLOR}${DESCRIPTION}
    [ ! -z $LINK ] && echo $LINK
done
echo -e ${BLUE}***********************************************${NC}

reset_color

exit 1

echo "Do you wish to continue?"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) :; break;;
        No ) echo "go throw phone in volcano"; exit;;
    esac
done

reset_color

echo we far

# Pull dependency
setup_dependency

fetch_prepare_ota() {
URL='https://system-image.ubports.com'

OUTPUT="${TOPDIR}/output"

mkdir -p "$OUTPUT" || true

download_file_and_asc() {
    wget "$1" -P "$2"
    wget "$1.asc" -P "$2"
}

# Gets the latest image from the system-image server
latest_image=$(wget -qO- "${URL}/${CHANNEL}/${DEVICE}/index.json" | jq '.images |  map(select(.type == "full")) | sort_by(.version) | .[-1]')

# Gets a list of files to download
files=$(echo "${latest_image}" | jq --raw-output '.files[].path')

# Downloads master and signing keyrings
download_file_and_asc "${URL}/gpg/image-signing.tar.xz" "$OUTPUT"
download_file_and_asc "${URL}/gpg/image-master.tar.xz" "$OUTPUT"

# Start to generate ubuntu_command file
echo '# Generated by ubports rootfs-builder-debos' > "$OUTPUT/ubuntu_command"

cat << EOF >> "$OUTPUT/ubuntu_command"
format system
load_keyring image-master.tar.xz image-master.tar.xz.asc
load_keyring image-signing.tar.xz image-signing.tar.xz.asc
mount system
EOF

# Download and fill ubuntu_command
for file_path in ${files}; do
    file=$(basename ${file_path})
    download_file_and_asc "${URL}/${file_path}" "$OUTPUT"
    echo "update $file $file.asc" >> "$OUTPUT/ubuntu_command"
done

# End ubuntu_command
echo 'unmount system' >> "$OUTPUT/ubuntu_command"
}

fetch_prepare_ota
#download_bootimg
#download_recovery
#download_vbmeta
