#!/bin/bash
export TOPDIR=$(pwd)
# Architecture detection for yq binary
if [ "$(uname -m)" == "x86_64" ]; then
export ARCH=amd64
elif [ "$(uname -m)" == "i686" ]; then
export ARCH=386
fi
#####################################
help()
{
   # Display help
   echo "The UBCLI script allows for flashing devices from the terminal"
   echo
   echo "Syntax: ubcli.sh [-c|-h|-d|-w|-b]"
   echo "options:"
   echo "   -c | --channel         Used to select a channel to install to the device."
   echo "   -d | --device          Used to specify a device. If no device is specificed the tool will try to automatically detect a device."
   echo "   -w | --wipe            Used to wipe the data partition of the device. Used when installing UT for the first time or wiping your user data"
   echo "   -b | --bootstrap       Used to install UT to a device for the first time. If you've installed UT already then don't enable this option"
   echo "   -h | --help            Display this message."
}
########################################################
# Colors
reset_color() {
        printf '\033[37m'
}
RED="$(printf '\033[31m')"  GREEN="$(printf '\033[32m')"  ORANGE="$(printf '\033[33m')"  BLUE="$(printf '\033[34m')" ENDCOLOR="\e[0m" ENDBOLDCOLOR="$(printf '\033[1m')"
MAGENTA="$(printf '\033[35m')"  CYAN="$(printf '\033[36m')"  WHITE="$(printf '\033[37m')" BLACK="$(printf '\033[30m')" NC='\033[0m' # No Color
########################################################

# Welcome message
echo -e ${GREEN}${ENDBOLDCOLOR}"Welcome to UBCLI! A tool to install Ubuntu Touch on your device from the command-line!"${NC}

setup_dependency() {
if [ ! -x /usr/bin/yq ]; then
sudo wget https://github.com/mikefarah/yq/releases/download/v4.16.1/yq_linux_$ARCH && sudo chmod 777 /usr/bin/yq
fi
[ ! -x /usr/bin/jq ] && sudo apt install jq || :
[ ! -x /usr/bin/fastboot ] && sudo apt install fastboot || :
[ ! -x /usr/bin/adb ] && sudo apt install adb || :
}

while getopts ":hc::d::w:b:-:" OPT; do
  if [ "$OPT" = "-" ]; then
     OPT="${OPTARG%%=*}"
     OPTARG="${OPTARG#$OPT}"
     OPTARG="${OPTARG#=}"
  fi
   case "$OPT" in
      h | help) help
	 exit;;
      c | channel) # Add channel
         CHANNEL=$OPTARG;;
      d | device) # device selector
	 DEVICE=$OPTARG;;
      w | wipe) # Wipe data partition
	 WIPE=true;;
      b | bootstrap) # Bootstrap device
	 BOOTSTRAP=true;;
     \?) echo "ERROR: Invalid option!"
	 help
	 exit;;
   esac
done
shift $((OPTIND-1))

# Device selector
if [ -z $DEVICE ]; then
    DEVICE=$(adb shell getprop ro.product.vendor.name | tr -d '\r')
fi
#########################
# Exit if no device found
if [ "$DEVICE" == "" ]; then
echo -e ${RED}${ENDBOLDCOLOR}"ERROR: No device found or defined!"${NC}
exit 1
fi


CONFIG="$(pwd)/installer-configs/v2/devices/${DEVICE}.yml"
CFG=$(yq eval -o json $CONFIG 2>/dev/null)
if [ $? -ne 0 ]; then
    CFG=$(yq . $CONFIG 2>/dev/null)
fi
DEVICEINFO=$(echo $CFG | jq -r .name)

echo Installing on $DEVICEINFO

for name in $(echo $CFG | jq .unlock[]); do
    ACTION=$(echo $CFG | jq -r .user_actions[$name])
    DESCRIPTION=$(echo $ACTION | jq -r .description)
    LINK=$(echo $ACTION | jq -r '.link // ""')
    echo ${BLUE}***********************************************
    echo ${RED}${ENDBOLDCOLOR}${DESCRIPTION}
    [ ! -z $LINK ] && echo $LINK
done
echo -e ${BLUE}***********************************************${NC}

reset_color

:

echo "Do you wish to continue?"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) :; break;;
        No ) echo "go throw phone in volcano"; exit;;
    esac
done

# Pull dependency
setup_dependency

if [ "$BOOTSTRAP" == "true" ]; then
rm -rf $TOPDIR/bootstrap
mkdir $TOPDIR/bootstrap
for link in $(echo $CFG | jq -r '.operating_systems[0].steps[0].actions[0]["core:download"].files[] | .url'); do
   wget $link -O $TOPDIR/bootstrap/*
done
fi

closed() {
URL='https://system-image.ubports.com'

OUTPUT="${TOPDIR}/output"

mkdir -p "$OUTPUT" || true

download_file_and_asc() {
    wget "$1" -P "$2"
    wget "$1.asc" -P "$2"
}

# Gets the latest image from the system-image server
latest_image=$(wget -qO- "${URL}/${CHANNEL}/${DEVICE}/index.json" | jq '.images |  map(select(.type == "full")) | sort_by(.version) | .[-1]')

# Gets a list of files to download
files=$(echo "${latest_image}" | jq -r '.files[].path')

# Downloads master and signing keyrings
download_file_and_asc "${URL}/gpg/image-signing.tar.xz" "$OUTPUT"
download_file_and_asc "${URL}/gpg/image-master.tar.xz" "$OUTPUT"

# Start to generate ubuntu_command file
echo '# Generated by ubports rootfs-builder-debos' > "$OUTPUT/ubuntu_command"

if [ "$WIPE" == "true" ]; then
cat << EOF >> "$OUTPUT/ubuntu_command"
format system
format data
load_keyring image-master.tar.xz image-master.tar.xz.asc
load_keyring image-signing.tar.xz image-signing.tar.xz.asc
mount system
EOF
else
cat << EOF >> "$OUTPUT/ubuntu_command"
format system
load_keyring image-master.tar.xz image-master.tar.xz.asc
load_keyring image-signing.tar.xz image-signing.tar.xz.asc
mount system
EOF
fi

# Download and fill ubuntu_command
for file_path in ${files}; do
    file=$(basename ${file_path})
    download_file_and_asc "${URL}/${file_path}" "$OUTPUT"
    echo "update $file $file.asc" >> "$OUTPUT/ubuntu_command"
done

# End ubuntu_command
echo 'unmount system' >> "$OUTPUT/ubuntu_command"
# Start installation on device end
adb push ${TOPDIR}/* /cache/recovery/*
adb reboot recovery
}
echo ${GREEN}"Installation complete! You can safely unplug your device now."
